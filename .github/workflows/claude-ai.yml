name: Claude AI Development Assistant (VibeCoding)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      request:
        description: 'Development request for Claude'
        required: true
        type: string

jobs:
  claude-development:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '[CLAUDE]') || github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '@claude')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Get Repository Context
        id: repo-context
        run: |
          echo "FILES_STRUCTURE<<EOF" >> $GITHUB_OUTPUT
          find . -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.js" -o -name "*.jsx" \) \
            -not -path "./node_modules/*" -not -path "./.git/*" | head -20 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Process Claude Request
        id: claude-request
        uses: actions/github-script@v7
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        with:
          script: |
            const issue = context.payload.issue;
            const comment = context.payload.comment;
            const workflowInput = context.payload.inputs;
            
            let request = '';
            if (issue && issue.title.includes('[CLAUDE]')) {
              request = issue.body;
            } else if (comment && comment.body.includes('@claude')) {
              request = comment.body.replace('@claude', '').trim();
            } else if (workflowInput) {
              request = workflowInput.request;
            }
            
            const claudeContext = {
              repository: context.repo,
              request: request,
              files_structure: process.env.FILES_STRUCTURE,
              package_json: require('fs').readFileSync('package.json', 'utf8'),
              project_type: 'nextjs-supabase',
              deployment_platform: 'railway'
            };
            
            const response = await fetch(process.env.SUPABASE_URL + '/functions/v1/claude-github-integration', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + process.env.SUPABASE_SERVICE_ROLE_KEY,
                'apikey': process.env.SUPABASE_ANON_KEY
              },
              body: JSON.stringify(claudeContext)
            });
            
            if (!response.ok) {
              throw new Error(`Claude API failed: ${response.status}`);
            }
            
            const claudeResponse = await response.json();
            
            // Store the response in a file to avoid JSON escaping issues
            require('fs').writeFileSync('claude-response.json', JSON.stringify(claudeResponse, null, 2));
            core.setOutput('claude_response', JSON.stringify(claudeResponse));

      - name: Apply Claude Changes
        if: steps.claude-request.outputs.claude_response
        run: |
          # Read the response from file to avoid JSON escaping issues
          if [ -f "claude-response.json" ]; then
            echo "üìÅ Reading Claude response from file..."
            node -e "
              const fs = require('fs');
              const path = require('path');
              
              try {
                const claudeResponse = JSON.parse(fs.readFileSync('claude-response.json', 'utf8'));
                console.log('‚úÖ Claude response loaded successfully');
                console.log('üìä Summary:', claudeResponse.summary);
                console.log('üìÅ Files to process:', claudeResponse.files ? claudeResponse.files.length : 0);
                
                if (claudeResponse.files && claudeResponse.files.length > 0) {
                  for (const file of claudeResponse.files) {
                    const dir = path.dirname(file.path);
                    if (dir !== '.') {
                      fs.mkdirSync(dir, { recursive: true });
                    }
                    fs.writeFileSync(file.path, file.content);
                    console.log(\`‚úÖ \${file.action}: \${file.path}\`);
                  }
                  console.log('üéâ All files processed successfully');
                } else {
                  console.log('‚ö†Ô∏è No files to process');
                }
              } catch (error) {
                console.error('‚ùå Error processing Claude response:', error.message);
                process.exit(1);
              }
            "
          else
            echo "‚ùå Claude response file not found"
            exit 1
          fi

      - name: Build and Test
        run: |
          if npm run build; then
            echo "‚úÖ Build successful"
          else
            echo "‚ùå Build failed"
            exit 1
          fi

      - name: Commit Changes
        run: |
          git config --local user.email "claude@vibecoding.com"
          git config --local user.name "Claude AI Assistant"
          
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "ü§ñ Claude AI: ${{ github.event.issue.title || github.event.comment.body || inputs.request }}"
            git push
            echo "‚úÖ Changes committed and deployed"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Deploy to Vercel
        if: success()
        run: |
          echo "üöÄ Deploying to Vercel..."
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
